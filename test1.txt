PS C:\Users\mattis\Documents\projekt\FOEBot\screenshots> python
Python 2.7.10 (default, May 23 2015, 09:44:00) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from PIL import image
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: cannot import name image
>>> from PIL import Image
>>> img = Image.open("super.png")
>>> super = Image.open("super.png")
>>> sub = Image.open("sub.png")
>>> import numpy as np
>>> superNP = np.array(super.getdata()).reshape(super.size[0], super.size[1], 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: total size of new array must be unchanged
>>> superNP = np.array(super.getdata()).reshape(super.size[0], super.size[1], 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: total size of new array must be unchanged
>>> np.array(super.getdata())
array([[ 82,  84,  36, 255],
       [ 88,  88,  37, 255],
       [101, 100,  44, 255],
       ...,
       [116, 119,  55, 255],
       [126, 125,  64, 255],
       [136, 131,  63, 255]])
>>> superNP = np.array(super.getdata()).reshape(super.size[0], super.size[1], 4)
>>> subNP = np.array(sub.getdata()).reshape(sub.size[0], sub.size[1], 4)
>>> (superNP == subNP).any(1).all()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'bool' object has no attribute 'any'
>>> (superNP == subNP).all(1).any()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'bool' object has no attribute 'all'
>>> super.size
(1365, 767)
>>> flatSuper = np.array(super.getdata())
>>> flatsuper
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'flatsuper' is not defined
>>> flatSuper
array([[ 82,  84,  36, 255],
       [ 88,  88,  37, 255],
       [101, 100,  44, 255],
       ...,
       [116, 119,  55, 255],
       [126, 125,  64, 255],
       [136, 131,  63, 255]])
>>> flatSuper.shape
(1046955L, 4L)
>>> flatSuper.reshape((1365, 767, 4))
array([[[ 82,  84,  36, 255],
        [ 88,  88,  37, 255],
        [101, 100,  44, 255],
        ...,
        [113, 123,  55, 255],
        [107, 116,  48, 255],
        [108, 115,  47, 255]],

       [[107, 114,  46, 255],
        [102, 111,  43, 255],
        [109, 116,  48, 255],
        ...,
        [ 60,  62,  50, 255],
        [ 86,  88,  64, 255],
        [ 97,  97,  20, 255]],

       [[ 99,  96,  12, 255],
        [ 36,  36,   9, 255],
        [ 43,  35,  11, 255],
        ...,
        [ 93, 109,  96, 255],
        [ 89, 106,  92, 255],
        [ 90, 109,  97, 255]],

       ...,
       [[151, 145, 119, 255],
        [ 54,  53,  46, 255],
        [ 16,  16,  16, 255],
        ...,
        [102, 111,  44, 255],
        [121, 126,  58, 255],
        [117, 123,  55, 255]],

       [[112, 119,  52, 255],
        [110, 117,  52, 255],
        [112, 120,  54, 255],
        ...,
        [108, 113,  47, 255],
        [117, 123,  59, 255],
        [120, 126,  62, 255]],

       [[123, 129,  64, 255],
        [118, 124,  53, 255],
        [108, 113,  47, 255],
        ...,
        [116, 119,  55, 255],
        [126, 125,  64, 255],
        [136, 131,  63, 255]]])
>>> flatSuper.reshape((super.size[0], super.size[1], 4))
array([[[ 82,  84,  36, 255],
        [ 88,  88,  37, 255],
        [101, 100,  44, 255],
        ...,
        [113, 123,  55, 255],
        [107, 116,  48, 255],
        [108, 115,  47, 255]],

       [[107, 114,  46, 255],
        [102, 111,  43, 255],
        [109, 116,  48, 255],
        ...,
        [ 60,  62,  50, 255],
        [ 86,  88,  64, 255],
        [ 97,  97,  20, 255]],

       [[ 99,  96,  12, 255],
        [ 36,  36,   9, 255],
        [ 43,  35,  11, 255],
        ...,
        [ 93, 109,  96, 255],
        [ 89, 106,  92, 255],
        [ 90, 109,  97, 255]],

       ...,
       [[151, 145, 119, 255],
        [ 54,  53,  46, 255],
        [ 16,  16,  16, 255],
        ...,
        [102, 111,  44, 255],
        [121, 126,  58, 255],
        [117, 123,  55, 255]],

       [[112, 119,  52, 255],
        [110, 117,  52, 255],
        [112, 120,  54, 255],
        ...,
        [108, 113,  47, 255],
        [117, 123,  59, 255],
        [120, 126,  62, 255]],

       [[123, 129,  64, 255],
        [118, 124,  53, 255],
        [108, 113,  47, 255],
        ...,
        [116, 119,  55, 255],
        [126, 125,  64, 255],
        [136, 131,  63, 255]]])
>>> sub
<PIL.PngImagePlugin.PngImageFile image mode=RGBA size=43x43 at 0x25D6C50>
>>> superFlat = np.array(super.getdata())
>>> subFlat = np.array(sub.getdata())
>>> superNP = superFlat.reshape((super.size[0], super.size[1], 4))
>>> subNP = subFlat.reshape((sub.size[0], sub.size[1], 4))
>>> (superNP == subNP).all(1).any()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'bool' object has no attribute 'all'
>>> (superNP == subNP)
False
>>>





Microsoft Windows [Version 10.0.15063]
(c) 2017 Microsoft Corporation. Med ensamrÃ¤tt.

C:\Users\mattis>python
Python 2.7.10 (default, May 23 2015, 09:44:00) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import numpy as np
>>> x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
>>> y = np.array([[1, 2, 3], [7, 8, 9]])
>>> (x == y)
False
>>> x.shape
(3L, 3L)
>>> y.shape
(2L, 3L)
>>> ((t == x).all() for t in y)
<generator object <genexpr> at 0x00000000021F7678>
>>> any((t == x).all() for t in y)
False
>>> any((t == y).all() for t in x)
False
>>> y = np.array([[1, 2, 3], [4, 5, 6]])
>>> any((t == y).all() for t in x)
False
>>> any((t == x).all() for t in y)
False
>>> for t in x:
...     print "test: " + t
...
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: cannot concatenate 'str' and 'numpy.ndarray' objects
>>>     print "test: " + str(t)
  File "<stdin>", line 1
    print "test: " + str(t)
    ^
IndentationError: unexpected indent
>>> for t in x:
...     print "test: " + str(t)
...
test: [1 2 3]
test: [4 5 6]
test: [7 8 9]
>>> t = x[0]
>>> t
array([1, 2, 3])
>>> (y == t)
array([[ True,  True,  True],
       [False, False, False]], dtype=bool)
>>> (y == t).all(1)
array([ True, False], dtype=bool)
>>> (y == t).all(1).all(0)
False
>>> (y == t).all(1).any(0)
True
>>>




